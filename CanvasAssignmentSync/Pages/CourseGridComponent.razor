@page "/testing"
@using Syncfusion.Blazor.Grids
@using CanvasAssignmentSync.Data
@using CanvasAssignmentSync.Models
@inject ICanvasService CanvasService


<div class="row">
    @*TODO Sorting is bugged out. Repeated sorting selects rows randomly(?)*@
    <SfGrid DataSource="@Courses" @ref="_courseGrid" AllowTextWrap="false" AllowGrouping="false"
            AllowSorting="false" AllowSelection="true" AllowPaging="false" AllowFiltering="true" Height="auto">
        <GridSelectionSettings Mode="SelectionMode.Row" CheckboxOnly="true" PersistSelection="false"
                               Type="SelectionType.Multiple"></GridSelectionSettings>
        <GridEvents DataBound="SelectSyncEnabledCourseRows" RowSelected="ProcessSelectedCourses"
                    RowDeselected="ProcessSelectedCourses"  TValue="Course">
        </GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(Course.Name)" HeaderText="Name" TextAlign="TextAlign.Left" Width="120">
            </GridColumn>
            <GridColumn Field="@nameof(Course.StartAt)" HeaderText="Start Date" Format="d" Type="ColumnType.Date"
                        TextAlign="TextAlign.Center" Width="130"></GridColumn>
            <GridColumn HeaderText="Sync Enabled" Type="ColumnType.CheckBox" Width="50">
                <HeaderTemplate>
                </HeaderTemplate>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>


<style type="text/css" class="cssStyles">
    .e-grid .e-altrow {
        /*background-color: #fafafa;*/
    }

    .e-grid .e-row .e-active {
        /*background-color: #bbff94;*/

    }
</style>

@code {
    private List<Course>? Courses { get; set; }
    private SfGrid<Course> _courseGrid = null!;
    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }


    protected override async Task OnInitializedAsync()
    {
        Courses = await CanvasService.GetCourses(cancellationTokenSource.Token);
    }



    /// <summary>
    /// Select the rows of sync enabled courses.
    /// </summary>
    /// <returns>Task</returns>
    private async Task SelectSyncEnabledCourseRows(object args)
    {
        if (Courses != null)
        {
            var indexes = GetSyncEnabledCourseIndexes(Courses);
            // Note that SyncFusion expects double array for indexing and not int array.
            await _courseGrid.SelectRowsAsync(indexes.ToArray());
        }
    }
    /// <summary>
    /// Returns a list of indexes of courses that have the ShouldSync bool set to true.
    /// </summary>
    /// <param name="courses"></param>
    /// <returns>indexes of courses that have the ShouldSync bool set to true</returns>
    private List<double> GetSyncEnabledCourseIndexes(List<Course> courses)
    {
        var indexes = new List<double>();
        var index = 0;
        foreach (var course in courses)
        {
            if (course.ShouldSync)
            {
                indexes.Add(index);
            }
            index++;
        }
        return indexes;
    }


    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public async Task ProcessSelectedCourses(RowSelectEventArgs<Course> args)
    {

        var selectedCourses = await _courseGrid!.GetSelectedRecords();
        if (selectedCourses is null) return;

        SetShouldSyncBool(Courses!, selectedCourses);
        // We only need to update the selected courses. The others are unchanged.
        CanvasService.UpdateCourses(selectedCourses);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public void ProcessSelectedCourses(RowDeselectEventArgs<Course> args)
    {
        var deselectedCourse = args.Data;
        // The course has been deselected.
        deselectedCourse.ShouldSync = false;
        // We only need to update the selected (deselected) courses. The others are unchanged.
        CanvasService.UpdateCourse(deselectedCourse);
    }


    /// <summary>
    /// Sets the ShouldSync bool to true for the selected courses. This method expects that selectedCourses is a subset of courses.
    /// </summary>
    /// <param name="courses"></param>
    /// <param name="selectedCourses"></param>
    private void SetShouldSyncBool(List<Course> courses, List<Course> selectedCourses)
    {
        foreach (var course in courses.Where(selectedCourses.Contains))
        {
            course.ShouldSync = true;
        }
    }
}